include std.io.network.tcp.Socket;
include std.os.Runner;


class Http_server extends ICommand {
	private parser;
	private http_class;
	private sd;
	
	private httpd;
	
	
	public method Http_server(){
		me.ICommand("http_server");
		//me.parser = new Parser("bh.conf");
		//me.http_class = new Http_class(me.parser.http_server_port, me.parser.http_server_path);
	}

	public method help(){
		println( "* http_server [start|stop|status]\t\t\t\t\t\tstart http server" );
	}
	
	public method server_start(){
		runner = new Runner( new Http_class() );
		me.sd = server( 8040 );
		if( me.sd <= 0 ){
			return false;
		}
		runner.go( me.sd );
		runner.join();
		return true;
	}
	

	public method exec( args ){
		
		me.parser = new Parser("bh.conf"); 					// ridichiaro qui per evitare di riaprire il file ad ogni modifica
		
		
		switch ( args ){
			
			case "start":
				println("Http server start");
				me.server_start();
			break;
			
			case "stop":
				println("Http server start");
				if ( me.httpd ){
					pthread_kill(me.httpd);
				}
			break;
			
			case "status":
				a=1;
			break;
			
			case "help":
				me.help();
			break;
			
			default:
				println("Invalid argument " + args);
			break;
		}
		
	}
}

class Http_class extends Runnable{
	public port;
	public path;
	public response;
	
	public method run( sd ){
		line = "";
		page = "";
		while( (csd = accept(sd)) > 0 ){
			s = new Socket(csd);
			while( line = s.readline() ){
				if( (matches = (line ~= "\s?(GET|POST)\s(.*)\sHTTP")) ){
					page = matches[1];
				} else if( line == "\r\n" ){
					filename = "./www/" + page;
					fp = fopen( filename, "rt" );
					if( fp ){
						s.write( "HTTP/1 + 1 200 OK\r\n" +
							"Content-Length: " + fsize(filename) + "\r\n\r\n" );
						byte = ' ';
						
						while( fread( fp, byte ) ){
							s.write( byte );
						}
							fclose(fp);
					} else{
						s.write( "HTTP/1 + 1 404 Not Found\r\n" +
						"Content-Length: 64\r\n\r\n" + "
						"<title>BugsHunter Http Server</title>" + 
						"<h1>404</h1>File Not Found." );
					}
					break;
				}
			}
		}
	}
	
	
}

/*
 * Creo l'istanza da far caricare al gestore principale.
 */
__cmd_instance = new Http_server();


/*
private method http_response( s ){
		
	}
	*/




/*

include std.os.Runner;

class Prova extends Runnable { 
	public method run( n ){
		println( "Hello " + n );
	}
}

try{
	runner = new Runner( new Prova() );

	foreach( i of 1..100 ){
		runner.go( i );	
	}

	runner.join();
	
	println(runner);
}
catch( e ){
	println(e);
}

// http://github.com/evilsocket/hybris/blob/master/stdinc/std/io/network/tcp/ServerSocket.hy
*/