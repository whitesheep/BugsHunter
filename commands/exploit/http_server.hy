/*
 *
 *   Copyright 2010 Rondini Marco
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

include std.io.network.tcp.Socket;
include std.os.Runner;


class Http_server extends ICommand {
	private parser;
	private http_class;
	private sd;
	
	private httpd;
	
	
	public method Http_server(){
		me.ICommand("http_server");
		me.parser = new Parser("bh.conf");
	}

	public method help(){
		println( "* http_server [start|stop|status]\t\t\t\t\t\tstart http server" );
	}
	
	public method server_start(){
		me.httpd = new Runner( new Http_class() );
		me.sd = server( toint(me.parser.http_server_port) );
		if( me.sd <= 0 ){
			return false;
		}
		me.httpd.go( me.sd, me.parser.http_server_path );
		me.httpd.join();
		return true;
	}
	

	public method exec( args ){
		
		me.parser = new Parser("bh.conf"); 					// ridichiaro qui per evitare di riaprire il file ad ogni modifica
		
		
		switch ( args ){
			
			case "start":
				if ( me.httpd ){
					println("Server http alredy up");
				} else {
					println("Starting http server");
				}
				me.server_start();
			break;
			
			case "stop":
				if ( me.httpd ){
					println("Stopping http server");
					pthread_kill(me.httpd);
				} else {
					println("Server http not started yet.");
				}
			break;
			
			case "status":
				if ( me.httpd ){
					println("Http server is UP");
				} else {
					println("Http server is DOWN");
				}
			break;
			
			case "help":
				me.help();
			break;
			
			default:
				println("Invalid argument " + args);
			break;
		}
		
	}
}

class Http_class extends Runnable{
	public port;
	public path;
	public response;
	
	public method run( sd, path ){
		line = "";
		page = "";
		while( (csd = accept(sd)) > 0 ){
			s = new Socket(csd);
			while( line = s.readline() ){
				if( (matches = (line ~= "\s?(GET|POST)\s(.*)\sHTTP")) ){
					page = matches[1];
				} else if( line == "\r\n" ){
					filename = path + page;
					fp = fopen( filename, "rt" );
					if( fp ){
						s.write( "HTTP/1 + 1 200 OK\r\n" +
							"Content-Length: " + fsize(filename) + "\r\n\r\n" );
						byte = ' ';
						
						while( fread( fp, byte ) ){
							s.write( byte );
						}
							fclose(fp);
					} else{
						s.write( "HTTP/1 + 1 404 Not Found\r\n" +
						"Content-Length: 64\r\n\r\n" + 
						"<title>BugsHunter Http Server</title>" + 
						"<h1>404</h1>File Not Found." );
					}
					break;
				}
			}
		}
	}
	
	
}

/*
 * Creo l'istanza da far caricare al gestore principale.
 */
__cmd_instance = new Http_server();
