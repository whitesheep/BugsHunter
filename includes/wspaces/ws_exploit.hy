/*
 *
 *   Copyright 2010 Rondini Marco
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

class WS_exploit extends IWorkspace{					// WorkSpace per auditing
									// Per usarlo "use auditing"
	public used;
	public nexploit;
	
									
	public method WS_exploit(){
		
		me.IWorkspace("exploit", "./commands/exploit");
		me.description = "\t\t\t\tWorkspace for launch your own exploit.";
		me.used = false;
		me.nexploit = 0;
		
	}
	
	public method using() {
		if ( !me.used )
		{			
			/*
			 * 	Per ogni script che trovo nella dir, lo carico, prendo l'istanza
			 * 	della classe che crea quando viene caricato, e la inserisco nella 
			 * 	mappa dei comandi.
			 */
			
			foreach( file of me.files ){
				if ( file["type"] != DT_DIR ){
					me.import_command("./commands/exploit/" + file["name"]);
				}
			}
			me.nexploit = me.commands["exploit"].load_exploit();		//avvio il caricamento di tutti gli exploit.
			
			me.used = true;
		}
		
		println("\n\t\tExploit WorkSpace ",
			"\t\t>> \033[0;31m" + me.nexploit + "\033[0m exploits\n");
		
	}
	
	
	public method show_hash() {
		/*foreach ( name -> lol of me.db_exploit_hash ) {
			println(name);
		}*/
		println(me.db_exploit);
	}
	
	
	public method import_command(file){
		load(file);
		me.commands[__cmd_instance.name] = __cmd_instance;
	}
	
	public method help(){
		println("\t\t\t --------- Exploiting Tool -----------",
			"* import_command <file>\t\t\t\t\t\t\t\timport external plugin");
		foreach( name -> cmd of me.commands ){
			cmd.help();
		}
	}
	
	
	public method exec( cmd, args ){
		
		if( me.commands.has(cmd) ){
			return me.commands[cmd].exec(args);
		}
		
		else {
			switch ( cmd ) {
				
				case "import_command" :
					me.import_command(args);
				break;
				
				case "show_hash" :
					me.show_hash();
				break;
				
				default: 
					println( cmd + " unknown command" );
			}
		}
	}
	
}

/*
 * Creo l'istanza da far caricare al gestore principale.
 */
__workspace_instance = new WS_exploit();
