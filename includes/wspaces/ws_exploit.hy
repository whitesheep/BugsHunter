/*
 *
 *   Copyright 2010 Rondini Marco
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

class WS_exploit extends IWorkspace{					// WorkSpace per auditing
									// Per usarlo "use auditing"
	db_exploit;
	db_exploit_cms;
	db_exploit_ver;
	db_exploit_type;
	db_exploit_hash;
	
									
	public method WS_exploit(){
		
		me.IWorkspace("exploit", "./commands/exploit");
		me.description = "\t\t\t\tWorkspace for launch your own exploit.";
		
		
		me.db_exploit = [ : ];
		me.db_exploit_cms = [ : ];
		me.db_exploit_ver = [ : ];
		me.db_exploit_type = [ : ];
		me.db_exploit_hash = [ : ];
		i = 0;
		
		/*
		 *
		 *	Per ogni file inserito nella cartella db/exploit mi importo la 
		 *	struttura per popolare l'hash db_exploit.
		 *
		 */
		 
		foreach( file of readdir("./db/exploit/", false) ){
			if ( file["type"] != DT_DIR ){
				load("./db/exploit/" + file["name"]);
				i++;
				me.db_exploit_hash[__db_instance.Hash] = [ : ];
				me.db_exploit_hash[__db_instance.Hash]["data"] = __db_instance.Description;
				me.db_exploit_hash[__db_instance.Hash]["parent"] = [ __db_instance.Lang, __db_instance.CMS_name, __db_instance.CMS_version, __db_instance.Type ]; 
				
				if ( !me.db_exploit_type.has(__db_instance.Type) ){
					me.db_exploit_type[__db_instance.Type] = [ : ];
					me.db_exploit_type[__db_instance.Type]["data"] = &me.db_exploit_hash;
					me.db_exploit_type[__db_instance.Type]["parent"] = [ __db_instance.Lang, __db_instance.CMS_name, __db_instance.CMS_version ]; 
				}
				
				if ( !me.db_exploit_type.has(__db_instance.CMS_version) ){
					me.db_exploit_ver[__db_instance.CMS_version] = [ : ];
					me.db_exploit_ver[__db_instance.CMS_version]["data"] = &me.db_exploit_type;
					me.db_exploit_ver[__db_instance.CMS_version]["parent"] = [ __db_instance.Lang, __db_instance.CMS_name];
				}
				
				if ( !me.db_exploit_type.has(__db_instance.CMS_name) ){
					me.db_exploit_cms[__db_instance.CMS_name] = [ : ];
					me.db_exploit_cms[__db_instance.CMS_name]["data"] = &me.db_exploit_ver;
					me.db_exploit_cms[__db_instance.CMS_name]["parent"] = [ __db_instance.Lang ];
				}
				
				
				me.db_exploit[__db_instance.Lang] = &me.db_exploit_cms;
				
				
			}

		}
		println("Ho caricato " + i + " exploit");
		/*
		foreach ( name -> lol of me.db_exploit_hash ) {
			println(name);
		}
		*/
		//println(me.db_exploit);
		
		
		
		
		/*
		 * 	Per ogni script che trovo nella dir, lo carico, prendo l'istanza
		 * 	della classe che crea quando viene caricato, e la inserisco nella 
		 * 	mappa dei comandi.
		 */
		 
		foreach( file of me.files ){
			if ( file["type"] != DT_DIR ){
				me.import_command("./commands/exploit/" + file["name"]);
			}
		}
	}
	
	//public method import_db_exploit(
	
	public method import_command(file){
		load(file);
		me.commands[__cmd_instance.name] = __cmd_instance;
	}
	
	public method help(){
		println("\t\t\t --------- Exploiting Tool -----------",
			"* import_command <file>\t\t\t\t\t\t\t\timport external plugin");
		foreach( name -> cmd of me.commands ){
			cmd.help();
		}
	}
	
	
	public method exec( cmd, args ){
		
		if( me.commands.has(cmd) ){
			return me.commands[cmd].exec(args);
		}
		
		else {
			switch ( cmd ) {
				
				case "import_command" :
					me.import_command(args);
				break;
				
				default: 
					println( cmd + " unknown command" );
			}
		}
	}
	
}

/*
 * Creo l'istanza da far caricare al gestore principale.
 */
__workspace_instance = new WS_exploit();
